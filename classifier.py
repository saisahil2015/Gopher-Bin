# -*- coding: utf-8 -*-
""" Cleaned_up.ipynb

Automatically generated by Collaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G7-Lt60s56j1e4WvxjfhHc42R7ahW-zC
"""

#!pip install tflite_runtime

# -*- coding: utf-8 -*-
"""TFLite.ipynb

Automatically generated by Collaboratory.

The original file is located at
    https://colab.research.google.com/drive/10dq7SlMfxT9BE5HAUGu3Vug7IDnJRIXU
"""

import tflite_runtime.interpreter as tflite
from PIL import Image
from PIL import ImageOps
import numpy as np

TF_LITE_MODEL_FILE_NAME = "PleaseWork.tflite"


#print(image)
#image.show()
#image = ImageOps.grayscale(image)


labels = ['non-biodegradable', 'biodegradable']

def run_tflite_model(tflite_file, test_image):

    interpreter = tflite.Interpreter(model_path=str(tflite_file))
    interpreter.allocate_tensors()
    input_details = interpreter.get_input_details()[0]
    output_details = interpreter.get_output_details()[0]

    interpreter.set_tensor(input_details["index"], test_image)
    interpreter.invoke()
    output = interpreter.get_tensor(output_details["index"])[0]

    outname = output_details['name']

    # print("output details:", output_details)
    
    prediction  = output.argmax()
    print("output:", output)

    return prediction,output[prediction]
    #return 1 if prediction >= 0.5 else 0 #0: bio, 1: nonbio

    #return prediction

def modify_image(image):
  width = 50
  height = 50
  
  image = ImageOps.grayscale(image)
  image = image.resize((height, width))
  image = np.array(image)
  image = np.expand_dims(image, axis=-1)
  image = image.astype(np.float32)

  resized_image = image
  # resized_image /= 255.
  

  return resized_image

# copied from motor.py
from picamera import PiCamera
from time import sleep
CAMERA_TIMER = 2

def takePhoto(): # copied from motor.py
  camera = PiCamera()
  #camera.start_preview()
  #sleep(CAMERA_TIMER)
  camera.capture('temp.jpeg')
  #camera.stop_preview()
  #image = camera.capture(SOME NUMPY ARRAY HERE) # temp solution: save the img to working
                        # directory and just delete it after every
                        # run thru
  #return image
  
takePhoto()
image = Image.open('temp.jpeg')
resized_image = modify_image(image)
test_2 = np.expand_dims(resized_image, axis=0)
result, acc= run_tflite_model(TF_LITE_MODEL_FILE_NAME, test_2)

print(labels[result])
print("accuracy: ", str(acc))

import time
from adafruit_motorkit import MotorKit
from adafruit_motor import stepper

kit = MotorKit()


if labels[result] == 'biodegradable':
    for i in range(1000):
      kit.stepper1.onestep(direction=stepper.FORWARD)
      kit.stepper2.onestep(direction=stepper.FORWARD)
      
else:
  for i in range(1000):
      kit.stepper1.onestep(direction=stepper.BACKWARD)
      kit.stepper2.onestep(direction=stepper.BACKWARD)
